{"version":3,"file":"5769.4232e014e72c307bdc5e.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/ui/Toggle.module.scss?0590","webpack://telegram-t/./src/components/ui/Toggle.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n  selectPinnedIds,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport { useLastCallback } from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"pHTSMORJ7J73wlJmXnNb\",\"widget\":\"bCgS149_amzM_wXYhOwW\",\"min\":\"EIngX7JB2IwA5XnGAlpo\",\"mid\":\"bNWGD8kaT2IHf7HrmLoA\",\"max\":\"FiCjIrDiSiJDbaafBQ8V\",\"filler\":\"KAFaJ8frkI3Uu05TmeTH\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Toggle.module.scss';\n\ninterface OwnProps {\n  value: 'min' | 'mid' | 'max';\n}\n\nfunction Toggle({ value }: OwnProps) {\n  return (\n    <div className={buildClassName(styles.root, 'Toggle')} aria-hidden>\n      <i className={buildClassName(styles.filler, styles[value])} />\n      <i className={buildClassName(styles.widget, styles[value])} />\n    </div>\n  );\n}\n\nexport default memo(Toggle);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME, APP_VERSION,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { IS_PWA } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\nimport Toggle from '../../ui/Toggle';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode]);\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n  const getAccessibleMenuTitle = (isOpen) => {\nlet title;\nif (hasMenu) {\nif (isOpen) {\ntitle =  lang('AccDescrCloseMenu');\n} else {\ntitle =  lang('AccDescrOpenMenu2');\n}\n} else {\ntitle =  'Return to chat list';\n}\nreturn title;\n};\n\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={getAccessibleMenuTitle(isOpen)}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  }, [setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(global, id);\n\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n            } else {\n              openShareChatFolderModal({\n                folderId: id,\n              });\n            }\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [displayedFolders, folderCountersById, lang, maxFolders, folderInvitesById, maxFolderInvites]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\nimport { useFastClick } from '../../hooks/useFastClick';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  }, [pinnedMessageIds, pinnedMessageId, onFocusPinnedMessage, chatId, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { LOCAL_MESSAGE_MIN_ID } from '../../../config';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 100;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useStateRef(toggleScrollTools);\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady, toggleScrollToolsRef]);\n\n  const freezeShortly = useCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, unfreezeForFab, unfreezeForNotch]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nexport const MIN_MEDIA_WIDTH_WITH_COMMENTS = 20 * REM;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 15 * REM;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 20 * REM;\nconst MIN_MEDIA_WIDTH = 7 * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  messageId: number,\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n  selectCanPlayAnimatedEmojis,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.id, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  },\n  [\n    isEmbedded, lang, message, observeIntersectionForLoading, observeIntersectionForPlaying, senderChat,\n    senderUser, targetChatId, targetMessage, targetUsers, topic,\n  ]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && handleClick}\n      onMouseDown={message && handleMouseDown}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo, withEffect,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        user={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useRef, useLayoutEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useLayoutEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  const handleQuickButtonClick = useCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  }, [webPage]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            lastSyncTime={lastSyncTime}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={forcedWidth || photo.dimensions?.width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.classList.add('has-appendix-thumb');\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - getThrottledProgress() * circumference;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    requestMutation(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, [setProgress]);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => (\n            <Avatar\n              key={user.id}\n              user={user}\n              size=\"micro\"\n            />\n          ))}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport {\n  getMinMediaWidth,\n  calculateMediaDimensions,\n  MIN_MEDIA_WIDTH_WITH_COMMENTS,\n  MIN_MEDIA_WIDTH_WITH_TEXT,\n} from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWidthWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, messageId, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < (isMediaWidthWithCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  } else if (sticker && !hasSubheader) {\n    const { width } = getStickerDimensions(sticker, isMobile);\n    style = `width: ${width + extraPadding}px`;\n    reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderQuickReactionButton() {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n        aria-hidden=\"true\"\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n      role=\"listitem\"\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useTextLanguage(text?: string) {\n  const [language, setLanguage] = useState<string>();\n\n  useSyncEffect(() => {\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    }\n  }, [text]);\n\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\" role=\"heading\" aria-level=\"5\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        role=\"heading\"\n        aria-level=\"4\"\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  LOCAL_MESSAGE_MIN_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectUserFullInfo,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/windowEnvironment';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = (\n      threadTopMessageId\n      && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n    )\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  }, [\n    updateStickyDates, hasTools, getForceNextPinnedInHeader, onPinnedIntersectionChange, type, chatId, threadId,\n  ]);\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          animateScroll(\n            container,\n            lastItemElement!,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { RefObject } from 'react';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, [setContainerHeight]);\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, !isTouchScreen && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const [getIsMounted, setIsMounted] = useSignal(false);\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useTimeout(() => { setIsMounted(true); }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetOrder,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer, shouldUpdateStickerSetOrder,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n    shouldUpdateStickerSetOrder,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n      });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage, shouldUpdateStickerSetOrder,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    getIsMounted() && 'mounted',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendWhenOnline = useCallback(() => {\n    handleMessageSchedule({ }, SCHEDULED_WHEN_ONLINE);\n  }, [handleMessageSchedule]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const {\n      language, shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder,\n    } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { RefObject } from 'react';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n} from '../../config';\nimport { IS_ANDROID, IS_IOS, MASK_IMAGE_DISABLED } from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n  pinnedIds?: number[];\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n  pinnedIds,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, leftColumnWidth, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id) && lastSyncTime,\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\n\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(chatId?: string, threadId?: number, pinnedIds?: number[]) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  }, [\n    chatId, threadId, key, pinnedIds, getLoadingPinnedId, getForceNextPinnedInHeader, setCurrentPinnedIndexes,\n    getCurrentPinnedIndexes, setLoadingPinnedId, setForceNextPinnedInHeader,\n  ]);\n\n  const onFocusPinnedMessage = useCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) return false;\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  }, [\n    chatId, getCurrentPinnedIndexes, getLoadingPinnedId, key, pinnedIds, setCurrentPinnedIndexes,\n    setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloadIds,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages![chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const hasActiveDownloads = Object.values(activeDownloads).some((messageIds) => messageIds.length);\n\n    return {\n      activeDownloads,\n      messages: hasActiveDownloads ? global.messages.byChatId : undefined,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default memo(ReactionPickerAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default memo(ChatlistModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons, loadTopReactions,\n    loadDefaultStatusIcons, loadRecentReactions, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab, initMain,\n  ]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, lastSyncTime, loadDefaultStatusIcons, loadRecentEmojiStatuses]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","_len","arguments","length","_ref","Array","_key","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","filter","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","pinnedMessageIds","selectPinnedIds","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","forceOnHeavyAnimation","direction","loadViewportMessages","shouldForceRender","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","_ref2","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","prevIsScreenLocked","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","settings","byKey","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","topics","onlineTimeout","prevBlurredTabsCount","addCallback","updateIsOnline","getActions","isLockedUpdated","blurredTabsCount","values","byTabId","isMasterTab","newBlurredTabsCount","getAllMultitabTokens","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","_len2","_ref3","_key2","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","callApi","users","repliesThreadInfos","localMessages","_ref4","isDeleted","_ref5","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingLists","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","sliceSize","from","to","areSomeLocal","areAllLocal","sendMessage","params","_len3","_ref6","_key3","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","pinnedIds","isPinned","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","originChannelId","selectThreadOriginChat","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","loadMessageViews","_ref7","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","currentThreadId","activeThreadId","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","currentReactions","reactions","isReactionChosen","chosenOrder","reaction","existingIndex","r","isSameReaction","recentReactions","addedDate","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","selectDefaultReaction","isMessageLocal","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","removeChatFromChatLists","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","searchQuery","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","skipLockOnUnload","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","getAccessibleMenuTitle","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","Toggle","isCharIcon","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archived","shouldSkipHistoryAnimations","hasArchivedChats","maxFolders","maxFolderInvites","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","onMouseDown","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","classList","requestMutation","remove","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_COMMENTS","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","SMALL_IMAGE_THRESHOLD","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","BOTTOM_FOCUS_OFFSET","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","excludedClosestSelector","onRelease","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playingProgressEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","chatsById","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","setLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","isMediaWidthWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useStateRef","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","chatBotFullInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","MAX_QUICK_IMG_SIZE","MAX_ASPECT_RATIO","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","appendChild","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","URL_ENTITIES","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","isTouchScreen","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","documentElement","outerHTML","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","getIsMounted","setIsMounted","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","shouldPreserveInput","canUpdateStickerSetsOrder","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendWhenOnline","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","noFastClick","CustomSendMenu","onSendSchedule","onSendWhenOnline","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}