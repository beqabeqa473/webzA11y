{"version":3,"file":"3748.5b5a0175de2cc6fd05d2.js","mappings":"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","sources":["webpack://telegram-t/./src/lib/rlottie/RLottie.ts","webpack://telegram-t/./src/util/PostMessageConnector.ts","webpack://telegram-t/./src/util/cycleRestrict.ts","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { requestMeasure, requestMutation } from '../fasterdom/fasterdom';\n\nimport {\n  DPR, IS_SAFARI, IS_ANDROID, IS_IOS,\n} from '../../util/windowEnvironment';\nimport { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport generateIdFor from '../../util/generateIdFor';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\ninterface Params {\n  size: number;\n  noLoop?: boolean;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\nconst ID_STORE = {};\n\nconst workers = launchMediaWorkers().map(({ connector }) => connector);\nconst instancesByRenderId = new Map<string, RLottie>();\n\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      params,\n      viewId = generateIdFor(ID_STORE, true), ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      // eslint-disable-next-line prefer-rest-params\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private params: Params,\n    viewId: string = generateIdFor(ID_STORE, true),\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number], viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n    this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    let [canvasWidth, canvasHeight] = [canvas.width, canvas.height];\n\n    if (!canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false') {\n      const sizeFactor = this.calcSizeFactor();\n      ([canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor));\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      canvas.dataset.isJustCleaned = 'true';\n      requestMeasure(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvasWidth),\n      y: Math.round((newCoords?.y || 0) * canvasHeight),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      requestMutation(() => {\n        ctx.drawImage(frame, containerInfo.coords!.x, containerInfo.coords!.y);\n      });\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      const { size } = this.params;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      requestMutation(() => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        canvas.width = imgSize;\n        canvas.height = imgSize;\n\n        container.appendChild(canvas);\n\n        this.views.set(viewId, {\n          canvas, ctx, onLoad,\n        });\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      imgSize = Math.round(this.params.size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      const [canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round(coords!.x * canvasWidth),\n          y: Math.round(coords!.y * canvasHeight),\n        },\n        onLoad,\n      });\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      size,\n      isLowPriority,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(DPR * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'rlottie:destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = Math.min(1, (this.direction * this.speed) / currentSpeed);\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    }, requestMutation);\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    requestMutation(() => {\n      canvas.width = expectedWidth;\n      canvas.height = expectedHeight;\n    });\n  }\n\n  return [expectedWidth, expectedHeight];\n}\n\nexport default RLottie;\n","import generateIdFor from './generateIdFor';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n  acceptsBuffer?: boolean;\n}\n\ntype InitData = {\n  channel?: string;\n  type: 'init';\n  messageId?: string;\n  name: 'init';\n  args: any;\n};\n\ntype CallMethodData = {\n  channel?: string;\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\nexport type OriginMessageData = InitData | CallMethodData | {\n  channel?: string;\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\nexport type ApiUpdate =\n  { type: string }\n  & any;\n\nexport type WorkerMessageData = {\n  channel?: string;\n  type: 'update';\n  update: ApiUpdate;\n} | {\n  channel?: string;\n  type: 'methodResponse';\n  messageId: string;\n  response?: any;\n  error?: { message: string };\n} | {\n  channel?: string;\n  type: 'methodCallback';\n  messageId: string;\n  callbackArgs: any[];\n} | {\n  channel?: string;\n  type: 'unhandledError';\n  error?: { message: string };\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestStates {\n  messageId: string;\n  resolve: Function;\n  reject: Function;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestStates>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestStates>();\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessage({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n\n    const messageId = generateIdFor(requestStates);\n    const payload: CallMethodData = {\n      type: 'callMethod',\n      messageId,\n      ...messageData,\n    };\n\n    const requestState = { messageId } as RequestStates;\n\n    // Re-wrap type because of `postMessage`\n    const promise: Promise<any> = new Promise((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessage(payload);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessage({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    if (data.type === 'update' && this.onUpdate) {\n      this.onUpdate(data.update);\n    }\n    if (data.type === 'methodResponse') {\n      const requestState = requestStates.get(data.messageId);\n      if (requestState) {\n        if (data.error) {\n          requestState.reject(data.error);\n        } else {\n          requestState.resolve(data.response);\n        }\n      }\n    } else if (data.type === 'methodCallback') {\n      const requestState = requestStates.get(data.messageId);\n      requestState?.callback?.(...data.callbackArgs);\n    } else if (data.type === 'unhandledError') {\n      throw new Error(data.error?.message);\n    }\n  }\n\n  private postMessage(data: AnyLiteral) {\n    data.channel = this.channel;\n\n    this.target.postMessage(data);\n  }\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes = InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","ID_STORE","workers","launchMediaWorkers","map","_ref","connector","instancesByRenderId","Map","lastWorkerIndex","RLottie","static","_len","arguments","length","args","Array","_key","canvas","renderId","params","viewId","generateIdFor","onLoad","instance","get","addView","coords","set","constructor","tgsUrl","container","undefined","customColor","onEnded","onLoop","_defineProperty","this","initConfig","initRenderer","removeView","ctx","isSharedCanvas","views","clearRect","x","y","imgSize","remove","delete","size","destroy","isPlaying","isAnimating","isWaiting","play","forceRestart","isPaused","isEnded","approxFrameIndex","Math","floor","stopFrameIndex","direction","doPlay","pause","from","values","every","_ref2","isLowPriority","frames","frame","i","prevFrameIndex","close","playSegment","_ref3","startFrameIndex","reduceFactor","setSpeed","speed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","canvasWidth","canvasHeight","width","height","dataset","isJustCleaned","sizeFactor","calcSizeFactor","ensureCanvasSize","requestMeasure","round","getFrame","requestMutation","drawImage","HTMLDivElement","parentNode","HTMLElement","Error","imageData","ImageData","document","createElement","getContext","style","appendChild","isConnected","isRendererInited","quality","max","DPR","isDestroyed","clearCache","destroyRenderer","forEach","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","MAX_WORKERS","request","name","onRendererInit","bind","msPerFrame","framesCount","changeData","onChangeData","lastRenderAt","animate","_ref4","isLoaded","frameIndex","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","min","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","offsetWidth","expectedHeight","offsetHeight","ConnectorClass","target","onUpdate","channel","init","postMessage","type","messageData","requestStates","requestStatesByCallback","messageId","payload","requestState","promise","Promise","resolve","reject","Object","assign","withCallback","callback","pop","catch","finally","cancelCallback","progressCallback","isCanceled","onMessage","data","update","error","response","callbackArgs","message","createConnector","worker","handleMessage","addEventListener","removeEventListener","index","navigator","hardwareConcurrency","instances","fill","Worker","URL"],"sourceRoot":""}