{"version":3,"file":"3779.b02df545396ae8f043e7.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/currentTimeSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/ui/Badge.module.scss?a5a8","webpack://telegram-t/./src/components/ui/Badge.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  }, [getZoomChange, setZoomChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  }, [getZoomChange, setZoomChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/windowEnvironment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import React, {\n  useRef, useState, useCallback, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  isActive?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst SeekLine: React.FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  url,\n  isActive,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  }, [setPreviewTime]);\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!isLockedRef.current && !isSeeking) {\n      setSelectedTime(getCurrentTime());\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, 500);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  }, [onSeek, setIsSeeking]);\n\n  const handleSeekStart = useCallback(() => {\n    setIsSeeking(true);\n  }, [setIsSeeking]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  }, [isLooped, setCurrentTime]);\n\n  const handleEnded = useCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [isLooped, setCurrentTime, toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  IS_TOUCH_ENV, IS_IOS, IS_ANDROID, ARE_WEBCODECS_SUPPORTED,\n} from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst IS_PREVIEW_DISABLED = (IS_IOS || IS_ANDROID) && !ARE_WEBCODECS_SUPPORTED;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  }, [clickXThreshold, getControlsVisible, setControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId, setActiveMediaId]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content!.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  }, [handleClose, mediaIdRef, chatId, isMobile, threadId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            user={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          user={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon', 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  }, [containerRef, idPrefix]);\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useCallback(() => {\n    onClick(reaction);\n  }, [onClick, reaction]);\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [\n    clearRecentCustomEmoji, clearRecentReactions, clearRecentStickers, closeConfirmModal, isEmoji, isReactionPicker,\n  ]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  }, [itemSize, margin, windowWidth]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isInstalled && !isPopular;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">{lang('Stickers', stickerSet.stickers.length, 'i')}</span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, idPrefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleReactionSelect = useCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  }, [onReactionSelect]);\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    'no-selection',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={idPrefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nfCRD3Y0nXzkML0bsjLH\",\"default\":\"QWzDb6x9al63G3nr9BGn\",\"alternate\":\"EgTekmCFBiBkvcvWELZw\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport ShowTransition from './ShowTransition';\n\nimport styles from './Badge.module.scss';\n\ntype OwnProps = {\n  text?: string;\n  className?: string;\n  isAlternateColor?: boolean;\n};\n\nconst Badge: FC<OwnProps> = ({\n  text,\n  className,\n  isAlternateColor,\n}) => {\n  return (\n    <ShowTransition\n      className={buildClassName(styles.root, isAlternateColor ? styles.alternate : styles.default, className)}\n      isOpen={Boolean(text)}\n    >\n      {text && <AnimatedCounter text={text} />}\n    </ShowTransition>\n  );\n};\n\nexport default memo(Badge);\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    setState((current) => ({\n      ...current,\n      isDragging: false,\n      width: undefined,\n      height: undefined,\n    }));\n\n    onDragEnd();\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'div-button', 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n    cb?.();\n  }, [dispatch, includedChatIds.length, includedChatTypes, isCreating, state.folder, state.folderId]);\n\n  const handleSubmit = useCallback(() => {\n    handleSaveFolder();\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [dispatch, handleSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) return;\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        handleSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n    } else {\n      openLimitReachedModal({\n        limit: 'chatlistInvites',\n      });\n    }\n  }, [handleSaveFolder, invites, lang, maxInviteLinks, onShareFolder, state.folderId, state.isTouched]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      handleSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [handleSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        {!isCreating && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FolderLinkScreen.Title')}\n            </h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={handleCreateInviteClick}\n            >\n              {lang('ChatListFilter.CreateLinkNew')}\n            </ListItem>\n\n            {invites?.map((invite) => (\n              <ListItem\n                className=\"settings-folders-list-item mb-0\"\n                icon=\"link\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={handleEditInviteClick}\n                clickArg={invite.url}\n              >\n                <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n                <span className=\"subtitle\">\n                  {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n                </span>\n              </ListItem>\n            ))}\n\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(inviteLink);\n  }, [copyLink, inviteLink]);\n\n  const handleShare = useCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  }, [inviteLink]);\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button onClick={handleCopyPrimaryClicked} className={styles.button}>\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button onClick={handleShare} className={styles.button}>\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, url]);\n\n  const handleRevoke = useCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  }, [folderId, onReset, url]);\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  useEffectWithPrevDeps(([prevIsLoading]) => {\n    if (isLoading && !prevIsLoading) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [isLoading, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  }, [lang]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (!folderId || !url) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  }, [folderId, selectedIds, url]);\n\n  const chatsCount = selectedIds.length;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={isLoading ? lang('Loading') : url!}\n        onRevoke={handleRevoke}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isLoading}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { openShareChatFolderModal } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    dispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [dispatch, handleReset]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/windowEnvironment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  isAuthRememberMe?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  isAuthRememberMe,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {isAuthRememberMe && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      isAuthRememberMe: global.authRememberMe,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          {canTranslate && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [hasCurrentUserFullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUser={currentUser}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const currentUserFullInfo = selectUserFullInfo(global, global.currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        user={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          user={user}\n          chat={chat}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={cn('static-icon')}\n          src={staticIconData}\n          alt=\"\"\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport {\n  isSameReaction, canSendReaction, getReactionUniqueKey, sortReactions,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  onShowMore: (position: IAnchorPosition) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 6;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  onToggleReaction,\n  onShowMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const availableReactions = useMemo(() => {\n    const reactions = allAvailableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }).filter(Boolean) || [];\n\n    return sortReactions(reactions, topReactions);\n  }, [allAvailableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions, topReactions]);\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  }, [onShowMore]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', lang.isRtl && 'isRtl')} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {reactionsToRender.map((reaction, i) => (\n            <ReactionSelectorReaction\n              key={getReactionUniqueKey(reaction.reaction)}\n              isReady={isReady}\n              onToggleReaction={onToggleReaction}\n              reaction={reaction}\n              noAppearAnimation={!canPlayAnimatedEmojis}\n              chosen={userReactionIndexes.has(i)}\n            />\n          ))}\n          {withMoreButton && (\n            <Button\n              color=\"translucent\"\n              className={cn('show-more')}\n              onClick={handleShowMoreClick}\n            >\n              <i className=\"icon icon-down\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition_slide-active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  }, [isDesktop, isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenReactionPicker = useCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  }, [onReactionPickerOpen]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenReactionPicker}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n  isServiceNotificationMessage,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n    openReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleReactionPickerOpen = useCallback((position: IAnchorPosition) => {\n    openReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  }, [message.chatId, message.id]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const isServiceNotification = isServiceNotificationMessage(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage || !doNotTranslate.includes(detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isServiceNotification && !isScheduled && !isAction && !hasTranslation\n      && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  const handleSponsorInfo = useCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  }, [message.additionalInfo, message.sponsorInfo]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, 'no-selection', isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectTabState,\n} from '../../../global/selectors';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  position,\n  isTranslucent,\n  withCustomReactions,\n}) => {\n  const { toggleReaction, closeReactionPicker } = getActions();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [storedPosition, withCustomReactions]);\n\n  const getMenuElement = useCallback(() => menuRef.current, []);\n  const getLayout = useCallback(() => ({ withPortal: true, isDense: true }), []);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  }, [renderedChatId, renderedMessageId]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  }, [renderedChatId, renderedMessageId]);\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(styles.menuContent, !withCustomReactions && styles.onlyReactions)}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !withCustomReactions}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={handleToggleCustomReaction}\n        onReactionSelect={handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const { chatId, messageId, position } = state.reactionPicker || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : false;\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleClick = useCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  }, [handleUserSelect]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, 'sticker-set', isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, 'no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (lastSyncTime && isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, lastSyncTime, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const handleOpenWebview = useCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  }, [botId, switchWebview]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              chat={chat}\n              user={user}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { isChatChannel } from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          chat={senderChat}\n          user={senderUser}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["ANIMATION_DURATION","createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","RADIUS","ITERATIONS","MAX_CACHE_SIZE","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","PREVIEW_SIZE_RATIO","IS_ANDROID","IS_IOS","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","duration","bufferedRanges","isReady","posterSize","isActive","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isPlaying","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","IS_PREVIEW_DISABLED","ARE_WEBCODECS_SUPPORTED","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","fullscreenProp","checkIfFullscreen","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","values","reduce","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","query","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","STICKER_INTERSECTION_THROTTLE","STICKER_INTERSECTION_MARGIN","SLIDE_TRANSITION_DURATION","SCROLL_MAX_DISTANCE_WHEN_CLOSE","SCROLL_MAX_DISTANCE_WHEN_FAR","FOCUS_MARGIN","useStickerPickerObservers","headerRef","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","entries","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","selectStickerSet","currentIndex","stickerSetEl","isClose","animateScroll","THRESHOLD","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","reaction","availableReactions","isSelected","loadAndPlay","observeIntersection","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","fullClassName","documentId","CustomEmoji","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","withTranslucentThumb","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","ITEMS_PER_ROW_FALLBACK","ITEMS_MOBILE_PER_ROW_FALLBACK","ITEMS_MINI_MOBILE_PER_ROW_FALLBACK","MOBILE_WIDTH_THRESHOLD_PX","MINI_MOBILE_WIDTH_THRESHOLD_PX","stickerSet","isNearActive","favoriteStickers","isSavedMessages","isStatusPicker","isReactionPicker","isCurrentUserPremium","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","pill","fluid","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","isCustomEmoji","emoji","StickerButton","observeIntersectionForShowing","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","offsetWidth","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","isAlternateColor","AnimatedCounter","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","Picker","itemIds","lockedIds","onSelectedIdsChange","selectedIds","Badge","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","ChatlistAlready","ChatlistNew","ChatlistDelete","isSlim","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","memberIds","seenByUserIds","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","r","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","lastSyncTime","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","settings","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","editChatFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleSaveFolder","folderUpdate","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","maxChats","filterValue","shouldHideChatTypes","onSelectedChatTypesChange","onFilterChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","link","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","useEffectWithPrevDeps","prevIsLoading","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","shownScreen","openShareChatFolderModal","handleReset","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","isAuthRememberMe","authRememberMe","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","BlockUserModal","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","filterPlaceholder","searchInputId","isSearchable","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","prevIsActive","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","rightIcon","onClickLabel","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","onTransitionEnd","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","cn","createClassNameBuilder","noAppearAnimation","chosen","onToggleReaction","mediaAppearData","appearAnimation","staticIconData","isAnimationLoaded","markAnimationLoaded","isFirstPlay","unmarkIsFirstPlay","activate","deactivate","onMouseEnter","allAvailableReactions","enabledReactions","currentReactions","maxUniqueReactions","onShowMore","canSendReaction","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","ReactionSelectorReaction","anchor","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","shouldAvoidNegativePosition","menuElMinWidth","transformOriginY","menuStyle","withScroll","useMenuPosition","handleOpenReactionPicker","bubbleStyle","ReactionSelector","messagesCount","MenuSeparator","Skeleton","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isServiceNotification","isServiceNotificationMessage","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","openReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","userFullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","isTouchScreen","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","reactionPicker","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","storedPosition","renderingPosition","withPortal","isDense","handleToggleCustomReaction","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","VIEWPORT_MARGIN","SCROLL_MARGIN","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","requestNextMutation","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","parseMessageInput","correctAnswers","solutionEntities","updateOption","newOptions","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","contentEditable","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","noFastClick","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","FLOATING_BUTTON_ANIMATION_TIMEOUT_MS","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","fullInfo","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","DEFAULT_DURATION","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","shippingOption","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName","hardwareConcurrency","instances","Worker","createConnector"],"sourceRoot":""}