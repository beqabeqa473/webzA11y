{"version":3,"file":"3779.379b69f2076c6a301849.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/currentTimeSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  }, [getZoomChange, setZoomChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  }, [getZoomChange, setZoomChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/windowEnvironment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import React, {\n  useRef, useState, useCallback, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  isActive?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst SeekLine: React.FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  url,\n  isActive,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  }, [setPreviewTime]);\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!isLockedRef.current && !isSeeking) {\n      setSelectedTime(getCurrentTime());\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, 500);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  }, [onSeek, setIsSeeking]);\n\n  const handleSeekStart = useCallback(() => {\n    setIsSeeking(true);\n  }, [setIsSeeking]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  }, [isLooped, setCurrentTime]);\n\n  const handleEnded = useCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [isLooped, setCurrentTime, toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  IS_TOUCH_ENV, IS_IOS, IS_ANDROID, ARE_WEBCODECS_SUPPORTED,\n} from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst IS_PREVIEW_DISABLED = (IS_IOS || IS_ANDROID) && !ARE_WEBCODECS_SUPPORTED;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  }, [clickXThreshold, getControlsVisible, setControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  }, [handleClose, mediaIdRef, chatId, isMobile, threadId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIdsRef]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            user={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          user={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon', 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  }, [containerRef, idPrefix]);\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useCallback(() => {\n    onClick(reaction);\n  }, [onClick, reaction]);\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [\n    clearRecentCustomEmoji, clearRecentReactions, clearRecentStickers, closeConfirmModal, isEmoji, isReactionPicker,\n  ]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  }, [itemSize, margin, windowWidth]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isInstalled && !isPopular;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">{lang('Stickers', stickerSet.stickers.length, 'i')}</span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, idPrefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleReactionSelect = useCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  }, [onReactionSelect]);\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    'no-selection',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={idPrefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import React, { useCallback, memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[userId];\n\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={user} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !userReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${userId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <PrivateChatInfo\n                        userId={userId}\n                        noStatusOrTyping\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"icon-message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  }, [chatId, closeMessageLanguageModal, messageId, requestMessageTranslation]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    setState((current) => ({\n      ...current,\n      isDragging: false,\n      width: undefined,\n      height: undefined,\n    }));\n\n    onDragEnd();\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'div-button', 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n    } else {\n      openLimitReachedModal({\n        limit: 'chatlistInvites',\n      });\n    }\n  }, [\n    invites, state.folderId, state.isTouched, maxInviteLinks, isCreating, onSaveFolder, onShareFolder, lang,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(inviteLink);\n  }, [copyLink, inviteLink]);\n\n  const handleShare = useCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  }, [inviteLink]);\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, url]);\n\n  const handleRevoke = useCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  }, [folderId, onReset, url]);\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  }, [lang]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (!folderId || !url) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  }, [folderId, selectedIds, url]);\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={isLoading ? lang('Loading') : url!}\n        onRevoke={handleRevoke}\n        isDisabled={isDisabled}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/windowEnvironment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  canSetPasscode,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          {canTranslate && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [hasCurrentUserFullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUser={currentUser}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const currentUserFullInfo = selectUserFullInfo(global, global.currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        user={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          user={user}\n          chat={chat}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions, withGlobal } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n    };\n  },\n)(SettingsExperimental));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  }, [updateArchiveSettings]);\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={cn('static-icon')}\n          src={staticIconData}\n          alt=\"\"\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport {\n  isSameReaction, canSendReaction, getReactionUniqueKey, sortReactions,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  onShowMore: (position: IAnchorPosition) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 6;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  onToggleReaction,\n  onShowMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const availableReactions = useMemo(() => {\n    const reactions = allAvailableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }).filter(Boolean) || [];\n\n    return sortReactions(reactions, topReactions);\n  }, [allAvailableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions, topReactions]);\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  }, [onShowMore]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', lang.isRtl && 'isRtl')} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {reactionsToRender.map((reaction, i) => (\n            <ReactionSelectorReaction\n              key={getReactionUniqueKey(reaction.reaction)}\n              isReady={isReady}\n              onToggleReaction={onToggleReaction}\n              reaction={reaction}\n              noAppearAnimation={!canPlayAnimatedEmojis}\n              chosen={userReactionIndexes.has(i)}\n            />\n          ))}\n          {withMoreButton && (\n            <Button\n              color=\"translucent\"\n              className={cn('show-more')}\n              onClick={handleShowMoreClick}\n            >\n              <i className=\"icon icon-down\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition_slide-active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  }, [isDesktop, isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenReactionPicker = useCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  }, [onReactionPickerOpen]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenReactionPicker}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && seenByDatesCount\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, seenByDatesCount],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                seenByDatesCount === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (seenByDatesCount\n                    ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n  isServiceNotificationMessage,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n    openReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return Object.keys(message.seenByDates).slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openChat]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const handleReactionPickerOpen = useCallback((position: IAnchorPosition) => {\n    openReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  }, [message.chatId, message.id]);\n\n  const handleTranslate = useCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, requestMessageTranslation]);\n\n  const handleShowOriginal = useCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message, showOriginalMessage]);\n\n  const handleSelectLanguage = useCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, openMessageLanguageModal]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const isServiceNotification = isServiceNotificationMessage(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage || !doNotTranslate.includes(detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isServiceNotification && !isScheduled && !isAction && !hasTranslation\n      && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  const handleSponsorInfo = useCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  }, [message.additionalInfo, message.sponsorInfo]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet, selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded, shouldUpdateStickerSetOrder]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, foundIds, focusedIndex, threadId]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, 'no-selection', isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectTabState,\n} from '../../../global/selectors';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  position,\n  isTranslucent,\n  withCustomReactions,\n}) => {\n  const { toggleReaction, closeReactionPicker } = getActions();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [storedPosition, withCustomReactions]);\n\n  const getMenuElement = useCallback(() => menuRef.current, []);\n  const getLayout = useCallback(() => ({ withPortal: true, isDense: true }), []);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  }, [renderedChatId, renderedMessageId]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  }, [renderedChatId, renderedMessageId]);\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(styles.menuContent, !withCustomReactions && styles.onlyReactions)}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !withCustomReactions}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={handleToggleCustomReaction}\n        onReactionSelect={handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const { chatId, messageId, position } = state.reactionPicker || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : false;\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleClick = useCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  }, [handleUserSelect]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSendSilent, onSend, isSendingCompressed, shouldSendGrouped,\n    updateAttachmentSettings,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, 'sticker-set', isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, 'no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (lastSyncTime && isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, lastSyncTime, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, withUsername]);\n\n  const handleSelect = useCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  }, [getHtml, handleSendCommand]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const handleOpenWebview = useCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  }, [botId, switchWebview]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              chat={chat}\n              user={user}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { isChatChannel } from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          chat={senderChat}\n          user={senderUser}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["ANIMATION_DURATION","createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","RADIUS","ITERATIONS","MAX_CACHE_SIZE","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","PREVIEW_SIZE_RATIO","IS_ANDROID","IS_IOS","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","duration","bufferedRanges","isReady","posterSize","isActive","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isPlaying","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","IS_PREVIEW_DISABLED","ARE_WEBCODECS_SUPPORTED","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","fullscreenProp","checkIfFullscreen","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","values","reduce","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","query","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","STICKER_INTERSECTION_THROTTLE","STICKER_INTERSECTION_MARGIN","SLIDE_TRANSITION_DURATION","SCROLL_MAX_DISTANCE_WHEN_CLOSE","SCROLL_MAX_DISTANCE_WHEN_FAR","FOCUS_MARGIN","useStickerPickerObservers","headerRef","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","entries","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","selectStickerSet","currentIndex","stickerSetEl","isClose","animateScroll","THRESHOLD","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","reaction","availableReactions","isSelected","loadAndPlay","observeIntersection","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","fullClassName","documentId","CustomEmoji","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","withTranslucentThumb","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","ITEMS_PER_ROW_FALLBACK","ITEMS_MOBILE_PER_ROW_FALLBACK","ITEMS_MINI_MOBILE_PER_ROW_FALLBACK","MOBILE_WIDTH_THRESHOLD_PX","MINI_MOBILE_WIDTH_THRESHOLD_PX","stickerSet","isNearActive","favoriteStickers","isSavedMessages","isStatusPicker","isReactionPicker","isCurrentUserPremium","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","pill","fluid","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","isCustomEmoji","emoji","StickerButton","observeIntersectionForShowing","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","offsetWidth","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","Picker","itemIds","lockedIds","onSelectedIdsChange","selectedIds","Badge","isAlternateColor","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","ChatlistAlready","ChatlistNew","ChatlistDelete","isSlim","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","memberIds","sort","leftId","rightId","handleCloseSeenByModal","noStatusOrTyping","formatDateAtTime","statusIcon","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","r","seenByUserIds","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","ReactionStaticEmoji","flatMap","userReactions","reactor","seenByUser","FullNameTitle","peer","withEmojiStatus","addedDate","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","lastSyncTime","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","split","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","settings","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","maxChats","filterValue","shouldHideChatTypes","onSelectedChatTypesChange","onFilterChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","link","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","useEffectWithPrevDeps","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","shownScreen","openShareChatFolderModal","editChatFolder","handleReset","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","BlockUserModal","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","filterPlaceholder","searchInputId","isSearchable","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","shouldUpdateStickerSetOrder","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","prevIsActive","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","shouldShowLoginCodeInChatList","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","rightIcon","onClickLabel","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","onTransitionEnd","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","cn","createClassNameBuilder","noAppearAnimation","chosen","onToggleReaction","mediaAppearData","appearAnimation","staticIconData","isAnimationLoaded","markAnimationLoaded","isFirstPlay","unmarkIsFirstPlay","activate","deactivate","onMouseEnter","allAvailableReactions","enabledReactions","currentReactions","maxUniqueReactions","onShowMore","canSendReaction","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","ReactionSelectorReaction","anchor","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","shouldAvoidNegativePosition","menuElMinWidth","transformOriginY","menuStyle","withScroll","useMenuPosition","handleOpenReactionPicker","bubbleStyle","ReactionSelector","messagesCount","MenuSeparator","Skeleton","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isServiceNotification","isServiceNotificationMessage","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","openReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","userFullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","isTouchScreen","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","reactionPicker","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","storedPosition","renderingPosition","withPortal","isDense","handleToggleCustomReaction","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","VIEWPORT_MARGIN","SCROLL_MARGIN","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","requestNextMutation","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","parseMessageInput","correctAnswers","solutionEntities","updateOption","newOptions","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","contentEditable","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","noFastClick","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","FLOATING_BUTTON_ANIMATION_TIMEOUT_MS","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","fullInfo","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","DEFAULT_DURATION","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","shippingOption","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName","hardwareConcurrency","instances","Worker","createConnector"],"sourceRoot":""}